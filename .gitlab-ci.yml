services:
  - docker:20.10.16-dind
variables:
  DOCKER_TLS_CERTDIR: "/certs"

stages:
  - lint
  - test
  - deploy

lint:
  stage: lint
  # only:
  #   - develop
  #   - merge_requests
  image: python:latest
  before_script:
    - mkdir -p public/badges public/lint
    - echo undefined > public/badges/$CI_JOB_NAME.score
    - pip install pylint-gitlab
    - pip install -r requirements.txt

  script:
    - pylint --exit-zero --output-format=text $(find -type f -name "*.py" ! -path "**/.venv/**") | tee /tmp/pylint.txt
    - sed -n 's/^Your code has been rated at \([-0-9.]*\)\/.*/\1/p' /tmp/pylint.txt > public/badges/$CI_JOB_NAME.score
    - pylint --exit-zero --output-format=pylint_gitlab.GitlabCodeClimateReporter $(find -type f -name "*.py" ! -path "**/.venv/**") > codeclimate.json
    - pylint --exit-zero --output-format=pylint_gitlab.GitlabPagesHtmlReporter $(find -type f -name "*.py" ! -path "**/.venv/**") > pylint.html

  after_script:
    - anybadge --overwrite --label $CI_JOB_NAME --value=$(cat public/badges/$CI_JOB_NAME.score) --file=public/badges/$CI_JOB_NAME.svg 4=red 6=orange 8=yellow 10=green
    - |
      echo "Your score is: $(cat public/badges/$CI_JOB_NAME.score)"
  artifacts:
    paths:
      - public
      - pylint.html
      - codeclimate.json
    reports:
      codequality: codeclimate.json

    expire_in: 1 week
    when: always
  allow_failure: true

test:
  stage: test

  image: docker:latest
  before_script:
    - ls -la
    - docker --version
  script:
    - docker compose run --rm smaug test
  after_script:
    - docker compose down --rmi all

  allow_failure: true # temporary allow failure for now

deploy:
  stage: deploy
  image: debian:latest
  environment:
    name: development
    url: https://powerdrive.skni.umcs.pl
  only:
    - develop

  variables:
    SSH_HOST: "yuumi.skni.umcs.pl"
    SSH_PORT: "22760"
    SSH_USER: "gitlab-deploy"
  before_script:
    # install ssh
    - apt-get update && apt-get install -y openssh-client
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - ssh-keyscan -H $SSH_HOST >> ~/.ssh/known_hosts
    # add strinct host key checking
    - echo "StrictHostKeyChecking no" >> /etc/ssh/ssh_config
    # - ssh -o StrictHostKeyChecking=no $SSH_USER@$SSH_HOST "echo 'Hello World'"
  script:
    - echo "Deploying to development server at $SSH_HOST"
    - ssh $SSH_USER@$SSH_HOST -p $SSH_PORT "cd /home/$SSH_USER/deployment/powerdrive && docker-compose down"
    - ssh $SSH_USER@$SSH_HOST -p $SSH_PORT "cd /home/$SSH_USER/deployment/powerdrive && git pull"
    - ssh $SSH_USER@$SSH_HOST -p $SSH_PORT "cd /home/$SSH_USER/deployment/powerdrive && docker build --no-cache ."
    - ssh $SSH_USER@$SSH_HOST -p $SSH_PORT "cd /home/$SSH_USER/deployment/powerdrivem && docker-compose up -d"
    - echo "Deployed to development server at $SSH_HOST"
  allow_failure: false
