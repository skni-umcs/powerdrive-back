stages:
  - lint
  - test
  - build
  - deploy

lint:
  stage: lint
  only:
    - develop
    - pushes
    - merge_requests
  image: python:latest
  before_script:
    - mkdir -p public/badges public/lint
    - echo undefined > public/badges/$CI_JOB_NAME.score
    - pip install pylint-gitlab
    - pip install -r requirements.txt

  script:
    - pylint --exit-zero --output-format=text $(find -type f -name "*.py" ! -path "**/.venv/**") | tee /tmp/pylint.txt
    - sed -n 's/^Your code has been rated at \([-0-9.]*\)\/.*/\1/p' /tmp/pylint.txt > public/badges/$CI_JOB_NAME.score
    - pylint --exit-zero --output-format=pylint_gitlab.GitlabCodeClimateReporter $(find -type f -name "*.py" ! -path "**/.venv/**") > codeclimate.json
    - pylint --exit-zero --output-format=pylint_gitlab.GitlabPagesHtmlReporter $(find -type f -name "*.py" ! -path "**/.venv/**") > pylint.html

  after_script:
    - anybadge --overwrite --label $CI_JOB_NAME --value=$(cat public/badges/$CI_JOB_NAME.score) --file=public/badges/$CI_JOB_NAME.svg 4=red 6=orange 8=yellow 10=green
    - |
      echo "Your score is: $(cat public/badges/$CI_JOB_NAME.score)"
  artifacts:
    paths:
      - public
      - pylint.html
      - codeclimate.json
    reports:
      codequality: codeclimate.json

    expire_in: 1 week
    when: always
  allow_failure: true

test:
  services:
    - docker:20.10.16-dind
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
  stage: test

  image: docker:latest
  before_script:
    - ls -la
    - docker --version
  script:
    - docker compose run --rm smaug test
  after_script:
    - docker compose down --rmi all

  allow_failure: true # temporary allow failure for now

build:
  services:
    - docker:20.10.16-dind
  variables:
    DOCKER_TLS_CERTDIR: "/certs"

  stage: build
  image: docker:latest
  before_script:
    - docker --version
  script:
    - docker build --no-cache .
  allow_failure: false


deploy:
  stage: deploy
  image: debian:latest
  environment:
    name: devel
    url: https://powerdrive.skni.umcs.pl/api/docs

  only:
    - develop
    - feature/ci-cd
  before_script:
    - "command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )"

    - eval $(ssh-agent -s)

    - ssh-add <(echo "$SSH_PRIVATE_KEY")

    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh

    - ssh-keyscan -p $SSH_PORT $SSH_HOST >> ~/.ssh/known_hosts
    - ssh -p $SSH_PORT $SSH_USER@$SSH_HOST "echo 'TEST CONENCTION'"

  script:
    - ssh -p $SSH_PORT $SSH_USER@$SSH_HOST "cd /home/gitlab-deploy/powerdrive/smaug && docker compose -f docker-compose.prod.yml down"
    - ssh -p $SSH_PORT $SSH_USER@$SSH_HOST "cd /home/gitlab-deploy/powerdrive/smaug && git pull"
    - ssh -p $SSH_PORT $SSH_USER@$SSH_HOST "cd /home/gitlab-deploy/powerdrive/smaug && docker compose -f docker-compose.prod.yml up -d"
  after_script:
    - rm -rf ~/.ssh


  allow_failure: false
